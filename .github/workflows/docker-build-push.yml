name: Build and Push Docker Image

on:
  workflow_run:
    workflows: ["Run Tests"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install protobuf compiler
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protobuf tools
      run: make -C api install-tools

    - name: Generate protobuf code
      run: make proto

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for discord-client
      id: meta-discord
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push discord-client Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: discord-client/Dockerfile
        target: prod
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-discord.outputs.tags }}
        labels: ${{ steps.meta-discord.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for lol-tracker
      id: meta-lol
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/moreshields/lol-tracker
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push lol-tracker Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: lol-tracker/Dockerfile
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-lol.outputs.tags }}
        labels: ${{ steps.meta-lol.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max