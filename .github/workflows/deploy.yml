name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        HIGH_ROLLER_ENABLED: ${{ vars.HIGH_ROLLER_ENABLED }}
        HIGH_ROLLER_ROLE_ID: ${{ vars.HIGH_ROLLER_ROLE_ID }}
        STARTING_BALANCE: ${{ vars.STARTING_BALANCE }}
        RESOLVER_DISCORD_IDS: ${{ vars.RESOLVER_DISCORD_IDS }}
        RIOT_API_KEY: ${{ secrets.RIOT_API_KEY }}
        TFT_RIOT_API_KEY: ${{ secrets.TFT_RIOT_API_KEY }}
        WORDLE_BOT_ID: ${{ vars.WORDLE_BOT_ID }}
        USE_GAME_CENTRIC_MODEL: ${{ vars.USE_GAME_CENTRIC_MODEL }}
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "DATABASE_URL='$DATABASE_URL' DISCORD_TOKEN='$DISCORD_TOKEN' HIGH_ROLLER_ENABLED='$HIGH_ROLLER_ENABLED' HIGH_ROLLER_ROLE_ID='$HIGH_ROLLER_ROLE_ID' RESOLVER_DISCORD_IDS='$RESOLVER_DISCORD_IDS' RIOT_API_KEY='$RIOT_API_KEY' TFT_RIOT_API_KEY='$TFT_RIOT_API_KEY' WORDLE_BOT_ID='$WORDLE_BOT_ID' USE_GAME_CENTRIC_MODEL='$USE_GAME_CENTRIC_MODEL' bash -s" << 'EOF'
          
          # Use user's home dir for deployment
          cd ~
          
          # Remove existing deployment directory and create fresh clone
          rm -rf gamba
          
          # Fresh shallow clone of the repository
          git clone --depth 1 https://github.com/${{ github.repository }}.git gamba
          cd gamba
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Deploy using Makefile target
          DATABASE_URL=$DATABASE_URL \
          DISCORD_TOKEN=$DISCORD_TOKEN \
          HIGH_ROLLER_ENABLED=$HIGH_ROLLER_ENABLED \
          HIGH_ROLLER_ROLE_ID=$HIGH_ROLLER_ROLE_ID \
          RESOLVER_DISCORD_IDS=$RESOLVER_DISCORD_IDS \
          RIOT_API_KEY=$RIOT_API_KEY \
          TFT_RIOT_API_KEY=$TFT_RIOT_API_KEY \
          WORDLE_BOT_ID=$WORDLE_BOT_ID \
          USE_GAME_CENTRIC_MODEL=$USE_GAME_CENTRIC_MODEL \
          make deploy
          
          # Clean up old images
          docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/gamba
          
          # Verify deployment using Makefile target
          make verify-deployment
          
          # Check if bot container is running
          if docker-compose --profile discord ps discord-bot | grep -q "Up"; then
            echo "Discord bot deployment successful - container is running"
          else
            echo "Discord bot deployment failed - container not running"
            echo "Migration logs:"
            docker-compose --profile discord logs discord-migrate
            echo "Bot logs:"
            docker-compose --profile discord logs discord-bot
            exit 1
          fi
          
          # Check if lol-tracker container is running
          if docker-compose --profile lol ps lol-tracker | grep -q "Up"; then
            echo "LoL tracker deployment successful - container is running"
          else
            echo "LoL tracker deployment failed - container not running"
            echo "Migration logs:"
            docker-compose --profile lol logs lol-tracker-migrate
            echo "Tracker logs:"
            docker-compose --profile lol logs lol-tracker
            exit 1
          fi
          
          # Check if NATS is running
          if docker-compose --profile lol ps nats | grep -q "Up"; then
            echo "NATS deployment successful - container is running"
          else
            echo "NATS deployment failed - container not running"
            echo "NATS logs:"
            docker-compose --profile lol logs nats
            exit 1
          fi
        EOF