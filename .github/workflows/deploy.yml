name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID }}
        HIGH_ROLLER_ENABLED: ${{ vars.HIGH_ROLLER_ENABLED }}
        HIGH_ROLLER_ROLE_ID: ${{ vars.HIGH_ROLLER_ROLE_ID }}
        STARTING_BALANCE: ${{ vars.STARTING_BALANCE }}
        RESOLVER_DISCORD_IDS: ${{ vars.RESOLVER_DISCORD_IDS }}
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          "DATABASE_URL='$DATABASE_URL' DISCORD_TOKEN='$DISCORD_TOKEN' HIGH_ROLLER_ENABLED='$HIGH_ROLLER_ENABLED' HIGH_ROLLER_ROLE_ID='$HIGH_ROLLER_ROLE_ID' RESOLVER_DISCORD_IDS='$RESOLVER_DISCORD_IDS' bash -s" << 'EOF'
          
          # Use user's home dir for deployment
          cd ~
          
          # Remove existing deployment directory and create fresh clone
          rm -rf gamba
          
          # Fresh shallow clone of the repository
          git clone --depth 1 https://github.com/${{ github.repository }}.git gamba
          cd gamba
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker-compose pull
          
          # Stop current containers
          docker-compose down

          echo $DATABASE_URL > db_url_env.txt

          
          # Start services with environment variables (migrations will run first due to depends_on)
          DATABASE_URL=$DATABASE_URL \
          DISCORD_TOKEN=$DISCORD_TOKEN \
          HIGH_ROLLER_ENABLED=$HIGH_ROLLER_ENABLED \
          HIGH_ROLLER_ROLE_ID=$HIGH_ROLLER_ROLE_ID \
          RESOLVER_DISCORD_IDS=$RESOLVER_DISCORD_IDS \
          docker-compose up -d
          
          # Clean up old images
          docker image prune -f
        EOF

    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/gamba
          
          # Check if bot container is running
          if docker-compose ps bot | grep -q "Up"; then
            echo "Deployment successful - bot container is running"
            docker-compose ps
          else
            echo "Deployment failed - bot container not running"
            echo "Migration logs:"
            docker-compose logs migrate
            echo "Bot logs:"
            docker-compose logs bot
            exit 1
          fi
        EOF