services:
  # PostgreSQL for development
  postgres:
    image: postgres:16-alpine
    container_name: gambler-postgres
    environment:
      POSTGRES_USER: gambler
      POSTGRES_PASSWORD: gambler_dev_password
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gambler -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["postgres", "discord", "lol"]

  # NATS overrides for development
  nats:
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5

  # Discord bot overrides for development
  discord-migrate:
    build:
      context: .
      dockerfile: discord-client/Dockerfile
      target: prod
    image: gambler-discord-migrate:dev
    environment:
      DATABASE_URL: postgres://gambler:gambler_dev_password@postgres:5432
      DATABASE_NAME: gambler_db
      ENVIRONMENT: development
    working_dir: /app
    command: ["gambler", "migrate", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts: []
    profiles: ["discord"]

  discord-bot:
    build:
      context: .
      dockerfile: discord-client/Dockerfile
      target: dev
    image: gambler-discord-bot:dev
    environment:
      DATABASE_URL: postgres://gambler:gambler_dev_password@postgres:5432
      DATABASE_NAME: gambler_db
      ENVIRONMENT: development
      LOG_LEVEL: debug
      HIGH_ROLLER_ENABLED: true
      
      # Message bus configuration
      MESSAGE_BUS_URL: nats://nats:4222
    volumes:
      - ./discord-client:/app
      - /app/tmp
    working_dir: /app
    command: air
    stdin_open: true
    tty: true
    extra_hosts: []
    profiles: ["discord"]
    depends_on:
      postgres:
        condition: service_healthy
      discord-migrate:
        condition: service_completed_successfully
      nats:
        condition: service_healthy

  # LoL Tracker migration overrides for development
  lol-tracker-migrate:
    build:
      context: .
      dockerfile: lol-tracker/Dockerfile
      target: production
    image: lol-tracker-migrate:dev
    environment:
      RIOT_API_KEY: ${RIOT_API_KEY}
      DATABASE_URL: postgres://gambler:gambler_dev_password@postgres:5432
      DATABASE_NAME: lol_tracker_db
      ENVIRONMENT: development
    working_dir: /app
    command: ["python", "-m", "alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts: []
    profiles: ["lol"]

  # LoL Tracker overrides for development
  lol-tracker:
    build:
      context: .
      dockerfile: lol-tracker/Dockerfile
      target: dev
    image: lol-tracker:dev
    environment:
      RIOT_API_URL: ${RIOT_API_URL}
      RIOT_API_KEY: ${RIOT_API_KEY}
      DATABASE_URL: postgres://gambler:gambler_dev_password@postgres:5432
      DATABASE_NAME: lol_tracker_db
      ENVIRONMENT: development
      LOG_LEVEL: debug
      POLL_INTERVAL_SECONDS: ${POLL_INTERVAL_SECONDS-60}
    volumes:
      - ./lol-tracker/lol_tracker:/app/lol_tracker
      - ./lol-tracker/tests:/app/tests
    working_dir: /app
    command: python /app/lol_tracker/main.py
    stdin_open: true
    tty: true
    extra_hosts: []
    depends_on:
      postgres:
        condition: service_healthy
      lol-tracker-migrate:
        condition: service_completed_successfully
      nats:
        condition: service_healthy
    profiles: ["lol"]

volumes:
  postgres_data:

networks:
  gamba-bridge:
    driver: bridge
    name: gamba-bridge